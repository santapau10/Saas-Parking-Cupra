name: Backend CI/CD backend

on:
  push:
    paths:
      - backend/api-gateway/**
      - backend/financial-management/**
      - backend/parking-management/**
      - backend/property-management/**

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: cupra # Establecer directamente a 'cupra-dev' para la rama dev
    env:
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_APPLICATION_CREDENTIALS_JSON }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GKE_CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
      GCR_REPOSITORY: gcr.io/cupra-cad
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}

      - name: Configure Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}

      # Install GKE auth plugin
      - name: Install GKE gcloud auth plugin
        run: |
          gcloud components update
          gcloud components install gke-gcloud-auth-plugin

      # Install Helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Authenticate Docker
        run: gcloud auth configure-docker gcr.io

      # Detect changed directories
      - name: Detect changed directories
        id: changes
        run: |
          # Detecta los directorios modificados
          CHANGED_DIRS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | awk -F"/" '{print $2}' | sort -u | grep -v '^helm-deploy$'| grep -v '^workflows$' | tr '\n' ' ')
          echo "Changed directories: $CHANGED_DIRS"

          # Exporta los directorios modificados como una variable de entorno
          echo "changed_dirs=$CHANGED_DIRS" >> $GITHUB_ENV
      - name: Build, push
        run: |
          # Primer bucle: Construir y empujar imágenes Docker para los servicios modificados
          for service in $changed_dirs; do
            echo "Processing service: $service"
            IMAGE_NAME="gcr.io/cupra-cad/$service:latest"
            
            # Construir la imagen Docker
            docker build --platform=linux/amd64 -t $IMAGE_NAME backend/$service

            # Empujar la imagen Docker
            docker push $IMAGE_NAME
          done

      - name: Get Credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone us-central1-a \
            --project ${{ secrets.GCP_PROJECT_ID }}

      # Build, push Docker images and deploy using Helm
      - name: Build, push, and deploy
        run: |
          # Segundo bucle: Iterar sobre los releases y sus namespaces para hacer el despliegue con Helm
          RELEASES=$(helm list -q | grep -v '^frontend$')  # Obtener la lista de releases desde Helm
          for release in $RELEASES; do
            echo "Processing Helm deployment for release: $release"
            
            # Obtener el namespace del release (se asume que el namespace está en el nombre del release sin la parte '-microservices')
            RELEASE_NAMESPACE=$(echo $release | sed 's/-microservices//')
            
            if [ -z "$RELEASE_NAMESPACE" ]; then
              echo "Namespace for $release not found, skipping Helm deployment."
              continue
            fi

            # Desplegar con Helm (Upgrade o Install)
            echo "Deploying $release to namespace $RELEASE_NAMESPACE"
            helm upgrade --install $release backend/helm-deploy --set namespace=$RELEASE_NAMESPACE
            for service in $changed_dirs; do
              kubectl rollout restart deployment $service --namespace $RELEASE_NAMESPACE
            done
          done
